Base {

// Invocation expression
Exp
  = TMLLocalizedStrings
  
// Defaults
Macro
  = "trl" | "trl" | "tr"
 
// Comments
comment
  = "//" (~"\n" any)* --single
  | "/*" (~"*/" any)* "*/" --multiple
  
// Treat comments as space
space
  += comment

// All localized strings, consuming entire input
TMLLocalizedStrings
  = ((~TMLLocalizedString any)* TMLLocalizedString)+ (~TMLLocalizedString any)*
  
// Localized string (default treats any string as localized, sub-grammars must override)
TMLLocalizedString
  = StringLiteral
  
  
// Literals
Literal
  = NumberLiteral
  | StringLiteral
  | BooleanLiteral
  | NullLiteral
  
NullLiteral
  = "null"
  
BooleanLiteral
  = "true"
  | "false"

NumberLiteral
  = digit+ ("." digit+)?
  
stringNonLiteral
(~"" nothing)
  = ~""
  
StringLiteral
  = QuotedStringLiteral<"\"", stringNonLiteral>
  | QuotedStringLiteral<"'", stringNonLiteral>
  
QuotedStringLiteral<quot, special>
  = quot quotedStringChars<(quot | special)> quot
  
quotedStringChars<special>
  = quotedChar<special>+
  
quotedChar<special>
  = "\\" special --escaped
  | ~special any
  
  
// Variables
Variable
  = #(validFirstVarChar validVarChar*)

validFirstVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | "\"" | "'" | digit | space) any
  
validVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | "\"" | "'" | space) any
  
// Operators
operator
  = unaryOperator
  | binaryOperator
  | ternaryOperator

unaryOperator
  = ("!" | "+" | "-" | "*" | "&" | "~")+
  
binaryOperator
  = ("&" | "|" | "^" | "<" | ">" | "+" | "-" | "/" | "%" | "*" | "=")+
  | "and" | "or" | "xor"
  
ternaryOperator
  = "?" | ":"
  
  
// Arguments
Arg
  = Method | Property | Variable | Literal
  
Method
  = MethodNamed<MethodName>
  
MethodNamed<methodName>
  = methodName "(" ListOf<ArgExp, ","> ")"
  
MethodName
  = Variable
  
Property
  = ArgExp ("." ArgExp)+
  
ArgExp
  = "(" ArgExp ")" --parens
  | ArgExp ternaryOperator ArgExp ternaryOperator ArgExp --ternary
  | ArgExp binaryOperator ArgExp --binary
  | unaryOperator ArgExp --unary
  | ArgExp unaryOperator --unaryAfter
  | Arg
  
  
// XML
XMLAnyTag
  = "<" XMLTagName XMLTagAttributeExp* "/"? ">"
  
XMLCloseAnyTag
  = "<" "/" XMLTagName ">"
  
XMLTag<tag>
  = "<" tag XMLTagAttributeExp* "/"? ">"
  
XMLCloseTag<tag>
  = "<" "/" tag ">"
  
XMLTagWithAttribute<tag, attr>
  = "<" tag (~(attr | ">") XMLTagAttributeExp)* attr XMLTagAttributeExp* "/"? ">"
  
XMLTagAttributeExp
  = XMLTagAttributeName ("=" XMLTagAttributeValue)?
  
XMLTagWithContent<tag, content>
  = XMLTag<tag> content XMLCloseTag<tag>
  
XMLTagWithAttributeAndContent<tag, attr, content>
  = XMLTagWithAttribute<tag, attr> content XMLCloseTag<tag>
  
xmlTagChar
  = alnum
  | ":" | "-"
  
XMLTagName
  = #(xmlTagChar+)
  
XMLTagAttributeName
  = #(xmlAttributeChar+)
  
XMLTagAttributeValue
  = StringLiteral
  
xmlAttributeChar
  = ~( space | "\"" | "'" | ">" | "/" | "=" ) any
  
}