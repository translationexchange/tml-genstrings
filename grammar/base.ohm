Base {

Tokens (default rule - we extract tokens)
  = token+
  
macro (defines macro)
  = "tr"
  
token
  = literal | openExpressionOperator | closeExpressionOperator | operator | namedToken
  
literal
  = string | number | bool | nil
  
nil
  = "null"
  
bool
  = "true" | "false"
  
string
  = quotedString<"\""> 
  | quotedString<"'"> 
  
stringNonLiteral (~"" nothing)
  = ~""
  
quotedString<quot>
  = quot quotedChar<quot>* quot
  
quotedChar<special>
  = "\\" special --escaped
  | ~special any
  
number
  = hexNumber | octalNumber | expNumber | decimal
  
hexNumber
  = "-"? "0x" hexDigit+
  
octalNumber
  = "-"? "0" digit+
  
expNumber
  = decimal ("e"|"E") "-"? digit+
  
decimal
  = digit* "." digit+ --float
  | digit+
  
  
operator
  = runinOperator+ 
  | "." | "," | ":" | ";" | "{" | "}" | "(" | ")" | "[" | "]" | "<" | ">" | "=" | "?" | "-" | "+" | "/" | "*" | "~" | "%" | "@"
  
runinOperator
  = "." | "<" | ">" | "=" | "-" | "+" | "/" | "*"
  
openExpressionOperator
  = "{" | "(" | "["
  
closeExpressionOperator
  = "}" | ")" | "]"
  
space
  += comment
  
comment
  = trailingComment
  | multilineComment
  
namedToken
  = (~(string | operator | space) any)+
  
trailingComment
  = "//" (~"\n" any)*
  
multilineComment
  = "/*" (~"*/" any) "*/"
  
}