Base {

// Invocation expression
Exp
  = TMLLocalizedStrings
 
// Comments
comment
  = "//" (~"\n" any)* --single
  | "/*" (~"*/" any)* "*/" --multiple
  
// Treat comments as space
space
  += comment

// All localized strings, consuming entire input
TMLLocalizedStrings
  = ((~TMLLocalizedString any)* TMLLocalizedString)+ (~TMLLocalizedString any)*
  
// Localized string (default treats any string as localized, sub-grammars must override)
TMLLocalizedString
  = StringLiteral
  
  
// Literals
Literal
  = NumberLiteral
  | StringLiteral
  | BooleanLiteral
  | NullLiteral

NumberLiteral
  = digit+ ("." digit+)?
  
StringLiteral
  = "\"" stringChars "\""
  
stringChars
  = stringChar*

stringChar
  = "\\\""
  | ~"\"" any

BooleanLiteral
  = "true"
  | "false"
  
NullLiteral
  = "null"
  
  
// Variables
Variable
  = #(validFirstVarChar validVarChar*)

validFirstVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | digit | space) any
  
validVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | space) any
  
// Operators
operator
  = unaryOperator
  | binaryOperator
  | ternaryOperator

unaryOperator
  = ("!" | "+" | "-" | "*" | "&" | "~")+
  
binaryOperator
  = ("&" | "|" | "^" | "<" | ">" | "+" | "-" | "/" | "%" | "*" | "=" | ",")+
  | "and" | "or" | "xor"
  
ternaryOperator
  = "?" | ":"
  
  
// Arguments
Arg
  = Literal | Variable
  
ArgExp
  = "(" ArgExp ")" --parens
  | ArgExp ternaryOperator ArgExp ternaryOperator ArgExp --ternary
  | ArgExp binaryOperator ArgExp --binary
  | unaryOperator ArgExp --unary
  | ArgExp unaryOperator --unaryAfter
  | Arg

}