Base {

Tokens (default rule - we extract tokens)
  = token+
  
macro (defines macro)
  = "tr"
  
token
  = macro | literal | openExpressionOperator | closeExpressionOperator | operator | namedToken
  
literal
  = interpolatedString | string | number | bool | nil
  
nil
  = "null"
  
bool
  = "true" | "false"
  
stringQuote
  = "\"" | "'"
  
string
  = quotedString<stringQuote> 
  
stringInterpolationStart
  = end any // no default value
  
stringInterpolationEnd
  = end any // no default value
  
stringInterpolation
  = stringInterpolationStart (stringInterpolationToken ~stringInterpolationEnd)* (stringInterpolationToken &stringInterpolationEnd)* stringInterpolationEnd
  
stringInterpolationToken
  = "(" stringInterpolationToken ")" --exp
  | token
  | space
  
interpolatedString
  = stringQuote ((~stringInterpolationStart quotedChar<stringQuote>)* stringInterpolation)+ quotedChar<stringQuote>* stringQuote
  
quotedString<quot>
  = quot quotedChar<quot>* quot
  
quotedChar<special>
  = "\\" special --escaped
  | ~special any
  
number
  = hexNumber | octalNumber | expNumber | decimal
  
hexNumber
  = "-"? "0x" hexDigit+
  
octalNumber
  = "-"? "0" digit+
  
expNumber
  = decimal ("e"|"E") "-"? digit+
  
decimal
  = digit* "." digit+ --float
  | digit+
  
  
operator
  = runinOperator+ 
  | "." | "," | ":" | ";" | "{" | "}" | "(" | ")" | "[" | "]" | "<" | ">" | "=" | "?" | "-" | "+" | "/" | "*" | "~" | "%" | "@"
  
runinOperator
  = "." | "<" | ">" | "=" | "-" | "+" | "/" | "*"
  
openExpressionOperator
  = "{" | "(" | "["
  
closeExpressionOperator
  = "}" | ")" | "]"
  
space
  += comment
  
comment
  = trailingComment
  | multilineComment
  
namedToken
  = (~(string | operator | space | stringInterpolationStart | stringInterpolationEnd) any)+
  
trailingComment
  = "//" (~"\n" any)*
  
multilineComment
  = "/*" (~"*/" any) "*/"
  
  
  
// TRL Support

trlQuote
  = "\"" | "'" | "&quot;"
  
trlString
  = quotedString<trlQuote> 

quotedTRLExp
  = trlQuote trlExp trlQuote

trlExp
  = "{{" space* (trlMethod | trlFilter) space* "}}"
  
trlMethod
  = "trl" "(" space* trlString space* ")"
  
trlFilter
  = trlString (space* "|" space* filterName)*
 
filterName
  = namedToken (":" namedToken)*
  
  

// Basic XML Support

xmlComment
  = xmlStartComment (~xmlEndComment any)* xmlEndComment

xmlStartComment
  = "<" space* "!" space* "--" space*

xmlEndComment
  = "--" space* ">"
 
xmlToken
  = xmlTagContent | xmlOpenTag | xmlCloseTag
  
xmlOpenTag
  = "<"
  
xmlCloseTag
  = ">"
  
xmlTagContent
  = xmlTagText
  
xmlTagTRLText
  = xmlCloseTag space* trlExp space*
  
xmlTagText
  = xmlCloseTag (~xmlOpenTag any)+
  
xmlOperator
  = "=" | ">" | "<"
  
}