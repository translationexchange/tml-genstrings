Base {

// Invocation expression
Exp
  = TMLLocalizedStrings
 
// Comments
comment
  = "//" (~"\n" any)* --single
  | "/*" (~"*/" any)* "*/" --multiple
  
// Treat comments as space
space
  += comment

// All localized strings, consuming entire input
TMLLocalizedStrings
  = ((~TMLLocalizedString any)* TMLLocalizedString)+ (~TMLLocalizedString any)*
  
// Localized string (default treats any string as localized, sub-grammars must override)
TMLLocalizedString
  = StringLiteral
  
  
// Literals
Literal
  = NumberLiteral
  | StringLiteral
  | BooleanLiteral
  | NullLiteral

NumberLiteral
  = digit+ ("." digit+)?
  
StringLiteral
  = QuotedStringLiteral<"\"">
  | QuotedStringLiteral<"'">
  
QuotedStringLiteral<quot>
  = quot quotedStringChars<quot> quot
  
quotedStringChars<quot>
  = #(quotedChar<quot>+)
  
quotedChar<quot>
  = "\\" quot --escaped
  | ~quot any

BooleanLiteral
  = "true"
  | "false"
  
NullLiteral
  = "null"
  
  
// Variables
Variable
  = #(validFirstVarChar validVarChar*)

validFirstVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | digit | space) any
  
validVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | space) any
  
// Operators
operator
  = unaryOperator
  | binaryOperator
  | ternaryOperator

unaryOperator
  = ("!" | "+" | "-" | "*" | "&" | "~")+
  
binaryOperator
  = ("&" | "|" | "^" | "<" | ">" | "+" | "-" | "/" | "%" | "*" | "=")+
  | "and" | "or" | "xor"
  
ternaryOperator
  = "?" | ":"
  
  
// Arguments
Arg
  = Method | Property | Variable | Literal
  
Method
  = MethodName "(" ListOf<ArgExp, ","> ")"
  
MethodName
  = Variable
  
Property
  = ArgExp ("." ArgExp)+
  
ArgExp
  = "(" ArgExp ")" --parens
  | ArgExp ternaryOperator ArgExp ternaryOperator ArgExp --ternary
  | ArgExp binaryOperator ArgExp --binary
  | unaryOperator ArgExp --unary
  | ArgExp unaryOperator --unaryAfter
  | Arg
  
  
// HTML
HTMLAnyTag
  = "<" HTMLTagName HTMLTagAttributeExp* "/"? ">"
  
HTMLCloseAnyTag
  = "<" "/" HTMLTagName ">"
  
HTMLTag<tag>
  = "<" tag HTMLTagAttributeExp* "/"? ">"
  
HTMLCloseTag<tag>
  = "<" "/" tag ">"
  
HTMLTagWithAttribute<tag, attr>
  = "<" tag HTMLTagAttributeExp* attr HTMLTagAttributeExp* "/"? ">"
  
HTMLTagAttributeExp
  = HTMLTagAttributeName ("=" HTMLTagAttributeValue)?
  
HTMLTagName
  = #(alnum+)
  
HTMLTagAttributeName
  = #(htmlAttributeChar+)
  
HTMLTagAttributeValue
  = StringLiteral
  
htmlAttributeChar
  = ~( space | "\"" | "'" | ">" | "/" | "=" ) any
  
}