Base {

// Invocation expression
exp
  = tmlLocalizedStrings
  
// Defaults
macro
  = "trl" | "tr"
 
// Comments
comment
  = "//" (~"\n" any)* --single
  | "/*" (~"*/" any)* "*/" --multiple
  
// Treat comments as space
space
  += comment

// All localized strings, consuming entire input

statementSep
  = ";" | "=" | space | "{" | "}"

tmlStatement
  = tmlLocalizedString

nonTMLStatement
  = ~tmlLocalizedString (~statementSep any)+

tmlLocalizedStrings
  = space* listOf<(tmlStatement|nonTMLStatement), statementSep+> (statementSep|space)*
  
// Localized string (default treats any string as localized, sub-grammars must override)
tmlLocalizedString
  = methodNamed<macro>
  
  
// Literals
literal
  = numberLiteral
  | stringLiteral
  | booleanLiteral
  | nullLiteral
  
nullLiteral
  = "null"
  
booleanLiteral
  = "true"
  | "false"

numberLiteral
  = digit+ ("." digit+)?
  
stringNonLiteral
(~"" nothing)
  = ~""
  
stringLiteral
  = quotedStringLiteral<"\"", stringNonLiteral>
  | quotedStringLiteral<"'", stringNonLiteral>
  
quotedStringLiteral<quot, special>
  = quot quotedStringChars<(quot | special)> quot
  
quotedStringChars<special>
  = quotedChar<special>+
  
quotedChar<special>
  = "\\" special --escaped
  | ~special any
  
  
// Variables
variable
  = #(validFirstVarChar validVarChar*)

validFirstVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | "\"" | "'" | digit | space) any
  
validVarChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | "\"" | "'" | space) any
  
// Operators
operator
  = unaryOperator
  | binaryOperator
  | ternaryOperator

unaryOperator
  = ("!" | "+" | "-" | "*" | "&" | "~")+
  
binaryOperator
  = ("&" | "|" | "^" | "<" | ">" | "+" | "-" | "/" | "%" | "*" | "=")+
  | "and" | "or" | "xor"
  
ternaryOperator
  = "?" | ":"
  
  
// Arguments
arg
  = tmlLocalizedString 
  | property 
  | method 
  | variable 
  | literal
  
argSep
  = space* "," space*
  
method
  = methodNamed<methodNameExp>
  | methodNamed<argExp>
  
methodNamed<aMethodName>
  = aMethodName "(" space* listOf<argExp, argSep > space* ")"
  
methodNameExp
  = validMethodChar+
  
validMethodChar
  = ~( "[" | "]" | ":" | "," | "." | ")" | "(" | "}" | "{" | "\"" | "'" | space) any
  
propertySeparator
  = "."
  
property
  = argExp (propertySeparator argExp)+
  
argExp
  = "(" space* argExp space* ")" --parens
  | argExp space* ternaryOperator space* argExp space* ternaryOperator space* argExp --ternary
  | argExp space* binaryOperator space* argExp --binary
  | unaryOperator space* argExp --unary
  | argExp space* unaryOperator --unaryAfter
  | arg
  
  
// XML
xmlAnyTag
  = "<" space* xmlTagName space+ listOf<xmlTagAttributeExp, space+> space* "/"? space* ">" --withAttrs
  | "<" space* xmlTagName space* "/" space* ">" --noAttrs
  
xmlCloseAnyTag
  = "<" space* "/" space* xmlTagName space* ">"
  
xmlTag<tag>
  = "<" space* tag space* listOf<xmlTagAttributeExp, space+> space* "/"? space* ">"
  
xmlCloseTag<tag>
  = "<" space* "/" space* tag space* ">"
  
xmlTagWithAttribute<tag, attr>
  = "<" space* tag (space+ ~(attr | ">") xmlTagAttributeExp)* space+ attr (space+ xmlTagAttributeExp)* space* "/"? space* ">"
  
xmlTagAttributeExp
  = xmlTagAttributeName ("=" xmlTagAttributeValue)?
  
xmlTagWithContent<tag, content>
  = xmlTag<tag> content xmlCloseTag<tag>
  
xmlTagWithAttributeAndContent<tag, attr, content>
  = xmlTagWithAttribute<tag, attr> content xmlCloseTag<tag>
  
xmlTagChar
  = alnum
  | ":" 
  | "-"
  
xmlTagName
  = xmlTagChar+
  
xmlTagAttributeName
  = xmlAttributeChar+
  
xmlTagAttributeValue
  = stringLiteral
  
xmlAttributeChar
  = ~( space | "\"" | "'" | ">" | "/" | "=" ) any
  
}