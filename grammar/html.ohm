Html <: Base {

// OVERRIDES
comment
  := startComment (~endComment any)* endComment
  
startComment
  = "<" space* "!" space* "--" space*

endComment
  = "--" space* ">"
  
arg
  := property 
  | method 
  | object 
  | variable 
  | literal
  
stringNonLiteral
  := "{{" | "}}"
  
tmlLocalizedString
  := xmlTagWithContent<"tml-tr", tmlLocalizedTagContent> --tmlTag
  | xmlTagWithAttribute<xmlTagName, trlAttributeExp> --trlInAttr
  | xmlTagWithAttribute<xmlTagName, tmlAttributeExp> --tmlInAttr
  | xmlTagWithAttributeAndContent<xmlTagName, "tml-tr", tmlLocalizedTagContent> --markedTag
  | xmlTagWithContent<xmlTagName, trlExp> --trlInTag

// END OF OVERRIDES

tmlLocalizedTagContent
  = space* trlExp space* --trl
  | (tagStringChar | nonTMLTag)+
  
trlAttributeExp
  = xmlTagAttributeName "=" quotedTRLExp
  
tmlAttributeExp
  = "tml-tr" "=" (quotedTRLExp | stringLiteral)
  
nonTMLAttribute
  = ~"tml-tr" xmlTagAttributeExp

nonTMLTag
  = "<" space* xmlTagName (space+ nonTMLAttribute)* space* ">" tmlLocalizedTagContent xmlCloseAnyTag
  
tagStringChar
  = ~("<" | codeMarkup) any
  
// Special Markup
codeMarkup
  = "{{" (~"}}" any)* "}}"

// TRL
quotedTRLExp
  = "\"" trlExp "\""
  | "'" trlExp "'"

trlExp
  = "{{" space* (trlMethod | trlFilter) space* "}}"
  
trlMethod
  = "trl" "(" space* stringLiteral space* ")"
  
trlFilter
  = stringLiteral space* "|" space* "trl" (space* ":" space* argExp)? (space* "|" space* filterName)*
 
filterName
  = variable
  
object
  = dict
  | array
  
dict
 = "{" space* listOf<dictEntry, argSep> space* "}"
  
dictEntry
  = (stringLiteral | variable) space* ":" space* argExp
  
array
  = "[" space* listOf<argExp, argSep> space* "]"

}