Objc <: Base {

// OVERRIDES
nullLiteral
  := "nil"
  | "NULL"
  
booleanLiteral
  += "YES" | "NO"
  
stringLiteral
  := quotedStringLiteral<"\"", stringNonLiteral>
  
arg
  := property
  | method
  | collectionAccess
  | messageSend
  | object
  | literal  
  | variable
  
macro
  := "TMLLocalizedString"
  | "TMLLocalizedAttributedString"
  | "TMLLocalizedDate"
  | "TMLLocalizedAttributedDate"

// END OF OVERRIDES

collectionAccess
  = argExp "[" space* argExp space* "]"

// Object  
object
  = stringObject
  | numberObject
  | dict
  | array
  | literalWrap
  
// Literal Wrap @(WHATEVER)
literalWrap
  = "@(" space* argExp space* ")"
  
// Number Object
numberObject
  = "@" numberLiteral

// String Object
stringObject
  = "@" stringLiteral (space* "@"? stringLiteral)*


// Dictionary
dict
  = "@{" space* listOf<dictEntry, argSep> space* "}"
  
dictEntry
  = stringObject space* ":" space* dictValue
  
dictValue
  = argExp


// Array
array
  = "@[" space* listOf<arrayEntry, argSep> space* "]"

arrayEntry
  = argExp


// Message Send
messageSend
  = noArgumentMessageSend
  | argumentMessageSend
  
noArgumentMessageSend
  = "[" space* receiver space+ noArgumentMessage space* "]"

argumentMessageSend
  = "[" space* receiver (space+ argumentMessage)+ space* "]"
  
receiver
  = messageComponent
  
noArgumentMessage
  = messageComponent
  
argumentMessage
  = messageComponent space* ":" space* listOf<argExp, argSep>

messageComponent
  = messageComponentChar+

messageComponentChar
  = ~( "[" | "]" | ":" | space ) any

}