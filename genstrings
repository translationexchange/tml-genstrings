#!/usr/bin/env node

var DEFAULT_OUTPUT_FILENAME = "genstrings.json";

require('./lib/defines.js');
var Path = require('path');
var Genstrings = require('./lib/genstrings.js');

// Program options and arguments
var Program = require('commander');

Program
  .version('0.0.1')
  .option('-a, --access-token <token>', 'Automatically register keys with Trasnaltion Exchange using provided access token')
  .option('--host <host>', 'Manually specify host (default: api.translationexchange.com)')
  .option('-i, --list-languages', 'Print out supported input languages')
  .option('-l, --language <lang>', 'Input language')
  .option('-m, --macro <Macro>', 'Override default macro')
  .option('-o, --output-file <file>', 'Write output to file instead of stdout (default: '+DEFAULT_OUTPUT_FILENAME+')')
  .option('-p, --pretty-print', 'Pretty print output')
  .option('-q, --quiet', 'Supress warnings and any verbose output')
  .option('-S, --source <source>', 'Specify TML Source name (default: none)')
  .option('-L, --locale <locale>', 'Specify source locale (default: en)');

Program
  .arguments("<file|dir> [file|dir...]");

Program.parse(process.argv);

// Globals

var opts = Program.opts();
var sourceFiles = Program.args;
var cwd = process.cwd();
var outputFile = opts.outputFile || Path.join(cwd, DEFAULT_OUTPUT_FILENAME);
var prettyPrint = !!opts.prettyPrint;
var prettyPrintSpaces = (prettyPrint) ? 2 : 0;

// If asked, print out suppoerted languages and exit
if (opts.listLanguages) {
  var langs = Genstrings.supportedLanguages;
  console.log("Supported languages: \n  " + langs.join(", "));  
  process.exit(-1);
}
// Crap out if we have no source files specified
if (!sourceFiles || sourceFiles.length == 0) {
  Program.outputHelp();
  process.exit(-1);
}


// Imports
 
var FS = require('fs');
var Util = require('util');
var Request = require('request');
var ProgressBar = require('progress');
var Logger = require(__dirname + '/lib/logger.js').sharedLogger;

/**
 * Posting Translation Keys
 */
function postTranslationKeysFromFile(keysFile, callback) {
  var accessToken = opts.accessToken;
  var response = "No Response!";
  if (!accessToken) {
    var error = new Error("No valid access token provided");
    Logger.error(error.message);
    if (typeof callback == 'function') {
      callback(error, null, null);
    }
    return;
  }
  
  var host = opts.host ? opts.host : "api.translationexchange.com";
  if (host.indexOf("http") !== 0) {
    host = "https://" + host;
  }
  var url = host+"/v1/projects/current/files";
  var r = Request.post(url, function(error, response, body){
    if (typeof callback == 'function') {
      try {
        response = JSON.parse(body);
      }
      catch(e) {
        response = body;
      }
      callback(error, response, response);
    }
  });
  
  var form = r.form();
  form.append("access_token", accessToken);
  form.append("realtime", "false");
  form.append("file", FS.createReadStream(keysFile), {filename: Path.basename(keysFile)});
}
function getProgressForFileUpload(fileID, callback) {
  var accessToken = opts.accessToken;
  if (!accessToken) {
    if (typeof callback == 'function') {
      var error = new Error("No valid access token provided");
      callback(error, null, null);
    }
  }
  
  var host = opts.host ? opts.host : "api.translationexchange.com";
  if (host.indexOf("http") !== 0) {
    host = "https://" + host;
  }
  var url = host + "/v1/files/" + encodeURIComponent(fileID) + "?access_token=" + encodeURIComponent(accessToken);
  
  Request.get(url, function(error, response, body) {
    if (typeof callback == 'function') {
      var result = null;
      try {
        result = JSON.parse(body);
      }
      catch(e){
        result = body;
      }
      callback(error, response, result);
    }
  });
}
function onTranslationKeysPostProgress(error, response, result) {
  var fileID = (result) ? result.id : undefined;
  if (!fileID) {
    Logger.error("Unexpected upload result: " + JSON.stringify(result));
    return;
  }
  
  var appName = (result && result.application) ? result.application.name : undefined;
  var fileName = (result) ? result.name : undefined;
  Logger.info("> Processing " + fileName + " for application '" + appName + "'...");
  
  monitorImportProgressForFileID(fileID, "Importing [:bar] :percent :etas", onTranslationKeysPosted);
}
function onTranslationKeysPosted(success) {
  if (success) {
    Logger.info("Finished!");
  }
  else {
    Logger.error("Finished with errors!");
  }
}
function monitorImportProgressForFileID(fileID, progressLabel, completionBlock) {
  if (!progressLabel) {
    progressLabel = "[:bar] :percent :etas";
  }
  var progress = new ProgressBar(progressLabel, DefaultProgressOptions);
  
  var lastProg = 0;
  var interval = setInterval(function() {
    getProgressForFileUpload(fileID, function(error, response, result) {
      if (result && result.state == "failed") {
        progress.terminate();
        Logger.error("Failed to import " + result.name);
        clearInterval(interval);
        if (typeof completionBlock == 'function') {
          completionBlock(false);
        }
        return;
      }
      if (result && typeof result.progress != 'undefined') {
        var prog = parseInt(result.progress, 10);
        progress.tick(prog - lastProg);
        if (prog >= 100) {
          clearInterval(interval);
          if (typeof completionBlock == 'function') {
            completionBlock(true);
          }
        }
        lastProg = prog;
      }
      else {
        Logger.error("Unexpected upload status: " + JSON.stringify(result));
        clearInterval(interval);
        if (typeof completionBlock == 'function') {
          completionBlock(false);
        }
      }
    });
  }, 1000);
}

/**
 * Progress
 */
var DefaultProgressOptions = {
    total: 100, 
    width: 32, 
    complete: "=", 
    incomplete: " "
};

function findFilesInDirectory(dir) {
  var files = FS.readdirSync(dir);
  if (!files || files.length === 0) {
    return null;
  }
  
  var result = [];
  for (var i=0; i<files.length; i++) {
    var file = files[i];
    var stat = FS.statSync(dir + "/" + file);
    if (!stat) {
      continue;
    }
    if (stat.isDirectory()) {
      var found = findFilesInDirectory(dir + "/" + file);
      if (found && found.length > 0) {
        result = result.concat(found);
      }
    }
    else if (stat.isFile()) {
      var ext = Path.extname(file) + "";
      if (!ext || ext.trim().length === 0) {
        continue;
      }
      // nodejs prepends extensions with dots
      // not sure if deliberate
      ext = ext.substring(new Number(ext[0] == ".")).toLowerCase();
      if (Genstrings.ExtensionLanguageMap[ext]) {
        result.push(dir + "/" + file);
      }
    }
  }
  return result;
}

function writeStringToOutputFile(str) {
  if (!str || str.length === 0) {
    return;
  }
  if (!outputStream) {
    outputStream = FS.createWriteStream(outputFile, 'utf8');
  }

  outputStream.write(str);
}

function main() {
  var files = [];
  for (var i=0; i<sourceFiles.length; i++) {
    var sourceFile = sourceFiles[i];
    var stat = FS.statSync(sourceFile);
    if (stat.isDirectory()) {
      var found = findFilesInDirectory(sourceFile);
      if (found || found.length > 0) {
        files = files.concat(found);
      }
    }
    else if (stat.isFile()) {
      if (sourceFile[0] != "/") {
        sourceFile = Path.join(cwd, sourceFile);
      }
      files.push(sourceFile);
    }
  }
  
  if (files.length == 0) {
    Logger.info("No sources found");
    process.exit(0);
  }
  
  var sourceLocale = (opts.locale) ? opts.locale : 'en';
  var response = {
    "source_locale": sourceLocale,
    "translation_memory": []
  }
  
  var leadin = JSON.stringify(response, null, prettyPrintSpaces);
  var breakIndex = leadin.indexOf("]");
  var leadout = leadin.substring(breakIndex);
  leadin = leadin.substring(0, breakIndex);
  writeStringToOutputFile(leadin);
  
  var genProgressOpts = Util._extend({}, DefaultProgressOptions);
  genProgressOpts.total = files.length;
  var genProgress = new ProgressBar("Scanning [:bar] :percent :etas :fileName", genProgressOpts);
  
  var foundHashes = {};
  var foundCount = 0;
  var totalCount = 0;
  var parser = new Genstrings();
  parser.macro = opts.macro;
  parser.language = opts.language;
  parser.on("warning", function(message, info) {
    if (opts.quiet) {
      return;
    }
    console.log("");
    var file = (info) ? info.file : "";
    var line = (info) ? info.line : "";
    var col = (info) ? info.column : "";
    var displayString = (info) ? info.displayString : "";
    var msg = displayString + "\n  " + message;
    if (file) {      
      Logger.warn(file + ":" + line + ":" + col + "\n  " + msg);
    }
    else {      
      Logger.warn(msg);
    }
  });
  parser.on("progress", function(progress, file, translationKeys) {
    var translationMemory = [];
    debugger;
    if (translationKeys) {
      for (var i=0; i<translationKeys.length; i++) {
        var key = translationKeys[i];
        if (!key) {
          continue;
        }
        var hash = key.id;
        if (foundHashes[hash] !== undefined) {
          continue;
        }
        translationMemory.push({"key": key});
        foundHashes[hash] = null;
      }
    }
    
    if (translationMemory.length > 0) {
      var str = JSON.stringify(translationMemory, null, prettyPrintSpaces);
      str = str.substring(1, str.length-1);
      if (foundCount > 0) {
        str = ","+str;
      }
      writeStringToOutputFile(str);
    }
    
    foundCount += translationMemory.length;
    totalCount += translationKeys.length;
    genProgress.tick(1, {"fileName": Path.basename(file)});
    
    if (progress >= 1.0) {
      var sourceName = (opts.source);
      foundHashes = Object.keys(foundHashes);
      if (sourceName) {
        var sourceStruct = {"name": sourceName, "keys": foundHashes};
        response["sources"] = [sourceStruct];
        var sourcesString = JSON.stringify(response, null, prettyPrintSpaces);
        sourcesString = leadout.substring(0,1) + sourcesString.substring(leadin.length + 1, sourcesString.length - leadout.length);
        writeStringToOutputFile(sourcesString);
      }
  
      outputStream.end(leadout, 'utf-8', function() {
        Logger.info("> Found " + totalCount + " total, generated "+ foundHashes.length + " unique, translation keys in " + outputFile);
        if (opts.accessToken) {
          Logger.info("> Uploading " + outputFile);
          postTranslationKeysFromFile(outputFile, onTranslationKeysPostProgress);
        }
      });
    }
    
  });
  parser.parseFiles(files);
}

if (global && global.v8debug && v8debug.Debug) {    
  global.v8debug.Debug.setBreakOnException();
}

var outputStream;

main();
