#!/usr/bin/env node

var ExtensionLanguageMap = {
  "m": "objc",
  "swift": "swift",
  "html": "html",
  "htm": "html",
  "js": "js",
  "jsp": "jsp",
  "java": "java"/*,
  "php": "php"*/
};
var DefaultOutputFilename = "genstrings.json";

/**
 * Program options and arguments
 */
var program = require('commander');
var path = require('path');

program
  .version('0.0.1')
  .option('-i, --list-languages', 'Print out supported input languages')
  .option('-l, --language <lang>', 'Input language')
  .option('-m, --macro <Macro>', 'Override default macro')
  .option('-o, --output-file <file>', 'Write output to file instead of stdout (default: '+DefaultOutputFilename+')')
  .option('-a, --access-token <token>', 'Automatically register keys with Trasnaltion Exchange using provided access token')
  .option('--host <host>', 'Manually specify host (default: api.translationexchange.com)')
  .option('-p, --pretty-print', 'Pretty print output')
  .option('-t, --trace', "Print out trace of a mis-/match (very verbose, best to use on single file)")
  .option('-S, --source <source>', 'Specify TML Source name (default: none)')
  .option('-L, --locale <locale>', 'Specify source locale (default: en)')
  .option('-v, --verbose', 'Be verbose');

program
  .arguments("<file|dir> [file|dir...]");

program.parse(process.argv);

/**
 * Globals
 */
var opts = program.opts();
var sourceFiles = program.args;
var cwd = process.cwd();
var outputFile = opts.outputFile || path.join(cwd, DefaultOutputFilename);

// If asked, print out suppoerted languages and exit
if (opts.listLanguages) {
  var map = ExtensionLanguageMap;
  var langs = [];
  for (var ext in map) {
    if (langs.indexOf(map[ext]) < 0) {      
      langs.push(map[ext]);
    }
  }
  console.log("Supported languages: " + langs.join(", "));  
  process.exit(-1);
}
// Crap out if we have no source files specified
if (!sourceFiles || sourceFiles.length == 0) {
  program.outputHelp();
  process.exit(-1);
}

/**
 * Imports
 */ 
var colors = require('colors');
var request = require('request');
var fs = require('fs');
var ohm = require('ohm-js');
var utils = require('./lib/genstringUtils.js');


/**
 * Logging
 */
function logInfo(msg) {
  console.warn(msg);
}
function logWarn(msg) {
  console.warn(("! " + msg).yellow);
}
function logError(msg) {
  console.error(("!!! " + msg).red);
}

/**
 * FS helpers
 */
function testIfFileExists(filePath) {
  var exists = false;
  try {
      var stat = fs.statSync(filePath);
      if (stat && stat.isFile()) {
        exists = true;
      }
      
  }
  catch (e) {
  }
  return exists;
}
function testIfDirectoryExists(dir) {
  var exists = false;
  try {
      var stat = fs.statSync(dir);
      if (stat && stat.isDirectory()) {
        exists = true;
      }
      
  }
  catch (e) {
  }
  return exists;
}

/**
 * Language detection
 */
function languageForFileAtPath(filePath) {
  var extension = path.extname(filePath).substring(1);
  return ExtensionLanguageMap[extension];
}

/**
 * Grammar
 */
var GrammarNamespace = {};
global.GrammarNamespace = GrammarNamespace;
function grammarFilePathForLanguage(lang) {
  return path.resolve(__dirname, "grammar/" + lang + ".ohm");
}
function grammarForLanguage(lang) {
  var grammarName = lang.substring(0,1).toUpperCase() + lang.substring(1);
  var grammar = GrammarNamespace[grammarName];
  if (!grammar) {
    var grammarFilePath = grammarFilePathForLanguage(lang);
    var grammarText = fs.readFileSync(grammarFilePath, 'utf8');
    grammar = ohm.grammar(grammarText, GrammarNamespace);
    GrammarNamespace[grammarName] = grammar;
  }
  return grammar;
}

/**
 * Semantics
 */
function semanticsFilePathForLanguage(lang) {
  return path.resolve(__dirname, "semantics/" + lang + ".js");
}
function getSemanticsDataForLanguage(lang) {
  var semanticsFilePath = semanticsFilePathForLanguage(lang);
  var description = require(semanticsFilePath);
  return description;
}
function loadSemanticsData(semantics, data) {
  utils.loadSemanticsData(semantics, data);
}

/**
 * Parsing
 */
function parseFile(file, lang) {
  if (opts.verbose) {    
    logInfo("< ["+lang+"] " + file);
  }
  var grammar = grammarForLanguage(lang);
  if (opts.macro) {
    var macros = opts.macro.split("|");
    for (var i=0; i<macros.length; i++) {
      macros[i] = JSON.stringify(macros[i]);
    }
    var runtimeGrammarText = "Runtime <: " + grammar.name + " { macro := "+macros.join("|")+" }";
    grammar = ohm.grammar(runtimeGrammarText, GrammarNamespace);
  }
  var source = fs.readFileSync(file, 'utf8');
  
  var startTime = Date.now();
  if (opts.trace) {
    logInfo(grammar.trace(source).toString().replace(/\\n/g, "\n"));
  }
  var match = grammar.match(source);
  var endTime = Date.now();
  
  if (opts.verbose) {
    var duration = endTime - startTime;
    logInfo("> Processed file " + file + " (" + duration + "ms, "+(match.succeeded())+")");
  }
  if (!match.succeeded()) {
    return null;
  }
  
  var semanticData = getSemanticsDataForLanguage(lang);
  var semantics = grammar.extendSemantics(baseSemantics);
  loadSemanticsData(semantics, semanticData);
  var matchSemantics = semantics(match);
  var translationKeys = matchSemantics.translationKeys;
  if (translationKeys && translationKeys.results) {
    translationKeys = translationKeys.results;
  }
  else {
    translationKeys = null;
  }
  return translationKeys;
}
function genTranslationKeys(files) {
  var result = {};
  
  for (var i=0; i<files.length; i++) {
    var file = files[i];
    
    if (!testIfFileExists(file)) {
      logWarn("Cannot find file: " + file);
      continue;
    }
    
    var lang = opts.language;
    if (!lang) {
      lang = languageForFileAtPath(file);
    }
    
    if (!lang) {
      logWarn("Could not determine source language");
      continue;
    }
    
    var translationKeys = parseFile(file, lang);
    if (!translationKeys || translationKeys.length === 0) {
      continue;
    }
    
    var str = "";
    for (var j=0; j<translationKeys.length; j++) {
      var key = translationKeys[j];
      var hash = key.id;
      if (!hash) {
        logWarn("Unhashed translation key: " + JSON.stringify(key));
        continue;
      }
      result[hash] = key;
    }
  }
  return result;
}

/**
 * Posting Translation Keys
 */
function postData(aUrl, data) {
  debugger;
  request.post({url: aUrl, formData: data}, function(err, response, body) {
    debugger;
  });
}
function postTranslationKeysFromFile(keysFile, callback) {
  var accessToken = opts.accessToken;
  var response = "No Response!";
  if (!accessToken) {
    var error = new Error("No valid access token provided");
    logError(error.message);
    if (typeof callback == 'function') {
      callback(error, null, null);
    }
    return;
  }
  
  var host = opts.host ? opts.host : "api.translationexchange.com";
  if (host.indexOf("http") !== 0) {
    host = "https://" + host;
  }
  var url = host+"/v1/projects/current/import";
  
  var r = request.post(url, function(error, response, body){
    if (typeof callback == 'function') {
      try {
        response = JSON.parse(body);
      }
      catch(e) {
        response = body;
      }
      callback(error, response, response);
    }
  });
  
  var form = r.form();
  form.append("access_token", accessToken);
  form.append("realtime", "false");
  form.append("file", fs.createReadStream(keysFile), {filename: path.basename(keysFile)});
}
function getProgressForFileUpload(fileID, callback) {
  var accessToken = opts.accessToken;
  if (!accessToken) {
    if (typeof callback == 'function') {
      var error = new Error("No valid access token provided");
      callback(error, null, null);
    }
  }
  
  var host = opts.host ? opts.host : "api.translationexchange.com";
  if (host.indexOf("http") !== 0) {
    host = "https://" + host;
  }
  var url = host + "/v1/files/" + encodeURIComponent(fileID) + "?access_token=" + encodeURIComponent(accessToken);
  
  request.get(url, function(error, response, body) {
    if (typeof callback == 'function') {
      var result = null;
      try {
        result = JSON.parse(body);
      }
      catch(e){
        result = body;
      }
      callback(error, response, result);
    }
  });
}
function onTranslationKeysPosted(error, response, result) {
  var fileID = (result) ? result.id : undefined;
  if (!fileID) {
    logError("Unexpected upload result: " + JSON.stringify(result));
    return;
  }
  
  var appName = (result && result.application) ? result.application.name : undefined;
  var fileName = (result) ? result.name : undefined;
  logInfo("> Processing " + fileName + " for application '" + appName + "'...");
  
  monitorImportProgressForFileID(fileID, fileName + " [:bar] :percent :etas");
}
function monitorImportProgressForFileID(fileID, progressLabel, callback) {
  var ProgressBar = require('progress');
  if (!progressLabel) {
    progressLabel = "[:bar] :percent :etas";
  }
  var progress = new ProgressBar(progressLabel, DefaultProgressOptions);
  
  var lastProg = 0;
  var interval = setInterval(function() {
    getProgressForFileUpload(fileID, function(error, response, result) {
      if (result && typeof result.progress != 'undefined') {
        var prog = parseInt(result.progress, 10);
        debugger;
        progress.tick(prog - lastProg);
        if (prog >= 100) {
          clearInterval(interval);
          if (typeof callback == 'function') {
            callback();
          }
        }
        lastProg = prog;
      }
      else {
        logError("Unexpected upload status: " + JSON.stringify(result));
        clearInterval(interval);
      }
    });
  }, 1000);
}

/**
 * Progress
 */
var DefaultProgressOptions = {
    total: 100, 
    width: 20, 
    complete: "=", 
    incomplete: " "
};

/**
 * File Searching
 */
function findFilesInDirectory(dir) {
  var files = fs.readdirSync(dir);
  if (!files || files.length === 0) {
    return null;
  }
  
  var result = [];
  for (var i=0; i<files.length; i++) {
    var file = files[i];
    var stat = fs.statSync(dir + "/" + file);
    if (!stat) {
      continue;
    }
    if (stat.isDirectory()) {
      var found = findFilesInDirectory(dir + "/" + file);
      if (found && found.length > 0) {
        result = result.concat(found);
      }
    }
    else if (stat.isFile()) {
      var ext = path.extname(file) + "";
      if (!ext || ext.trim().length === 0) {
        continue;
      }
      // nodejs prepends extensions with dots
      // not sure if deliberate
      ext = ext.substring(new Number(ext[0] == ".")).toLowerCase();
      if (ExtensionLanguageMap[ext]) {
        result.push(dir + "/" + file);
      }
    }
  }
  return result;
}

/**
 * Main
 */
function main() {
  // pre-load Base grammar
  // TODO: loading higher grammar should preload supergrammars, then we wouldn't need to do this at all
  baseGrammar = grammarForLanguage("base");
  baseSemantics = baseGrammar.semantics();
  loadSemanticsData(baseSemantics, getSemanticsDataForLanguage("base"));
  
  var files = [];
  for (var i=0; i<sourceFiles.length; i++) {
    var sourceFile = sourceFiles[i];
    var stat = fs.statSync(sourceFile);
    if (stat.isDirectory()) {
      var found = findFilesInDirectory(sourceFile);
      if (found || found.length > 0) {
        files = files.concat(found);
      }
    }
    else if (stat.isFile()) {
      files.push(sourceFile);
    }
  }
  
  if (files.length == 0) {
    logInfo("No sources found");
    process.exit(0);
  }
  
  var translationKeys = genTranslationKeys(files);
  var translationMemory = [];
  for (var hash in translationKeys) {
    translationMemory.push({"key": translationKeys[hash]});
  }
  
  var sourceLocale = (opts.locale) ? opts.locale : 'en';
  var response = {
    "source_locale": sourceLocale,
    "translation_memory": translationMemory
  }
  
  var sourceName = (opts.source);
  if (sourceName) {
    var sourceStruct = {"name": sourceName, "keys": Object.keys(translationKeys)};
    response["sources"] = [sourceStruct];
  }
  
  var prettyPrint = !!opts.prettyPrint;
  var prettyPrintSpaces = (prettyPrint) ? 2 : 0;
  
  fs.writeFileSync(outputFile, JSON.stringify(response, null, prettyPrintSpaces));
  if (opts.accessToken) {
    logInfo("> Uploading " + outputFile);
    postTranslationKeysFromFile(outputFile, onTranslationKeysPosted);
  }
}

if (global && global.v8debug && v8debug.Debug) {    
  global.v8debug.Debug.setBreakOnException();
}

var baseGrammar, baseSemantics;

main();
